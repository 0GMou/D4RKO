name: build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    env:
      # Identificador del paquete (ya acordado)
      PACKAGE_ID: d4rk0.mpv

    steps:
      - name: Set up job
        uses: actions/checkout@v4

      # 1) Resolver el último tag estable de MPV y exponer MPV_TAG / MPV_VER
      - name: Resolve latest stable MPV release tag
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          try {
            $tag = gh release view --repo mpv-player/mpv --json tagName --jq '.tagName'
          } catch {
            $resp = Invoke-RestMethod -Uri "https://api.github.com/repos/mpv-player/mpv/releases/latest" -Headers @{ "User-Agent"="d4rk0-ci" }
            $tag = $resp.tag_name
          }
          if (-not $tag) { throw "No pude resolver el tag de MPV." }
          $ver = $tag.TrimStart('v')
          "MPV_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "MPV_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "MPV tag: $tag  / version: $ver"

      # 2) MSYS2 con toolchain, meson/ninja y dependencias de mpv (CLANG64)
      - name: Setup MSYS2 (CLANG64) + packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: clang64
          update: true
          release: true
          path-type: minimal
          cache: true
          install: >
            git zip
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-meson
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-pkgconf
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-libass
            mingw-w64-clang-x86_64-libplacebo
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-spirv-cross
            mingw-w64-clang-x86_64-shaderc
            mingw-w64-clang-x86_64-ntldd

      # 3) Descargar el código fuente del último tag
      - name: Fetch mpv source
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          curl -fsSL -o mpv.tar.gz "https://github.com/mpv-player/mpv/archive/refs/tags/${MPV_TAG}.tar.gz"
          tar -xzf mpv.tar.gz
          mv "mpv-${MPV_VER}" mpv-src

      # 4) Parche mínimo para FFmpeg 8+ (macro AV_PROFILE_*)
      - name: Patch FF_PROFILE macros (FFmpeg 8+)
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -e
          sed -i 's/FF_PROFILE_ARIB_PROFILE_A/AV_PROFILE_ARIB_PROFILE_A/g' demux/demux_mkv.c
          sed -i 's/FF_PROFILE_ARIB_PROFILE_C/AV_PROFILE_ARIB_PROFILE_C/g' demux/demux_mkv.c
          sed -i 's/FF_PROFILE_UNKNOWN/AV_PROFILE_UNKNOWN/g' demux/demux_mkv.c

      # 5) Configurar y compilar (Meson/Ninja)
      - name: Configure (Meson) & Build
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          meson setup build --buildtype=release
          meson compile -C build -v

      # 6) Hacer bundle portable y crear ZIP
      - name: Make portable ZIP
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euo pipefail
          out="./dist"
          mkdir -p "$out"

          # Ejecutables
          cp -v build/mpv.exe "$out/" || (echo "mpv.exe no encontrado" && exit 1)
          [ -f build/mpv.com ] && cp -v build/mpv.com "$out/"

          echo "Resolviendo DLLs con ntldd."
          prefix_unix="/clang64/bin"

          # 1) Extraer posibles DLLs (tolerar lista vacía)
          mapfile -t DLLS < <(
            ntldd -R build/mpv.exe \
            | sed -n 's/.*=>[[:space:]]*\(.*\.dll\).*/\1/p' \
            | tr -d '\r'
          ) || true

          # 2) Normalizar y copiar solo las de /clang64/bin
          for p in "${DLLS[@]}"; do
            p_u="$(cygpath -u "$p" 2>/dev/null || echo "$p")"
            if [[ "$p_u" == $prefix_unix/*.dll ]]; then
              echo "  + $p_u"
              cp -nv "$p_u" "$out/" || true
            fi
          done

          cd "$out"
          /usr/bin/zip -9 -r "d4rk0.mpv-${MPV_VER}-windows-x64.zip" .

      # 7) Localizar ZIP en Windows (ruta absoluta) y exportarla
      - name: Locate ZIP (Windows absolute path)
        shell: pwsh
        run: |
          $name = "d4rk0.mpv-$env:MPV_VER-windows-x64.zip"
          $zip = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -File -Filter $name | Select-Object -First 1
          if (-not $zip) { throw "ZIP not found: $name" }
          "ZIP_PATH_WIN=$($zip.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ZIP found at: $($zip.FullName)"

      # 8) Subir artefacto del job (útil para probar)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: d4rk0.mpv-${{ env.MPV_VER }}-windows-x64
          path: ${{ env.ZIP_PATH_WIN }}
          if-no-files-found: error

      # 9) Publicar en GitHub Releases (adjuntar ZIP)
      - name: Publish to GitHub Releases
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $tag = "v${env:MPV_VER}"
          $name = "${env:PACKAGE_ID}-${env:MPV_VER}-windows-x64"
          # Crear release si no existe
          if (-not (gh release view $tag -R $env:GITHUB_REPOSITORY 2>$null)) {
            gh release create $tag --title "$name" --notes "Automated build of mpv $env:MPV_VER" -R $env:GITHUB_REPOSITORY
          }
          gh release upload $tag "${env:ZIP_PATH_WIN}" --clobber -R $env:GITHUB_REPOSITORY
