name: Build MPV (d4rk0, Windows x64)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      MSYSTEM: CLANG64
      CHERE_INVOKING: 1
      PACKAGE_ID: d4rk0.mpv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Resolver última release estable (robusto: gh + REST)
      - name: Resolve latest stable MPV release
        id: mpvver
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $ErrorActionPreference = "Stop"
          $tag = ""
          if (Get-Command gh -ErrorAction SilentlyContinue) {
            if (-not $env:GH_TOKEN) { $env:GH_TOKEN = $env:GITHUB_TOKEN }
            $tag = $(gh release view --repo mpv-player/mpv --json tagName --jq '.tagName' 2>$null)
            if ($LASTEXITCODE -ne 0) { $tag = "" }
          }
          if (-not $tag) {
            $headers = @{
              "Accept"="application/vnd.github+json"
              "Authorization"="Bearer $env:GITHUB_TOKEN"
              "User-Agent"="d4rk0-ci"
            }
            $resp = Invoke-RestMethod -Method GET -Uri "https://api.github.com/repos/mpv-player/mpv/releases/latest" -Headers $headers
            $tag = $resp.tag_name
          }
          if (-not $tag) { throw "No pude resolver el tag de MPV." }
          $ver = $tag.TrimStart('v')
          "MPV_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "MPV_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "MPV tag: $tag / version: $ver"

      # 2) MSYS2 + toolchain + dependencias (con LuaJIT y extras)
      - name: Setup MSYS2 (CLANG64) + packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: clang64
          update: true
          path-type: minimal
          cache: true
          install: >-
            git
            zip
            curl
            jq
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-python
            mingw-w64-clang-x86_64-meson
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-pkgconf
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-libass
            mingw-w64-clang-x86_64-libplacebo
            mingw-w64-clang-x86_64-harfbuzz
            mingw-w64-clang-x86_64-uchardet
            mingw-w64-clang-x86_64-luajit
            mingw-w64-clang-x86_64-mujs
            mingw-w64-clang-x86_64-zimg
            mingw-w64-clang-x86_64-lcms2
            mingw-w64-clang-x86_64-libarchive
            mingw-w64-clang-x86_64-libbluray
            mingw-w64-clang-x86_64-libdvdread
            mingw-w64-clang-x86_64-libdvdnav
            mingw-w64-clang-x86_64-vapoursynth
            mingw-w64-clang-x86_64-shaderc
            mingw-w64-clang-x86_64-spirv-cross
            mingw-w64-clang-x86_64-vulkan-loader

      # 3) Obtener fuente de mpv (tag estable)
      - name: Fetch mpv source
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${MPV_TAG}" https://github.com/mpv-player/mpv.git mpv-src

      # 4) Parche seguro FFmpeg 8+ (solo si aplica)
      - name: Patch FF_PROFILE -> AV_PROFILE (safe)
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -e
          grep -RIl 'FF_PROFILE' || true
          files=$(grep -RIl 'FF_PROFILE' || true)
          if [ -n "${files}" ]; then
            sed -i 's/FF_PROFILE/AV_PROFILE/g' ${files}
          fi

      # 5) Configurar y compilar con Meson/Ninja (MSYS2)
      - name: Configure & Build (Meson/Ninja)
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          meson setup build mpv-src --buildtype=release
          meson compile -C build -v
          echo "----- Meson feature summary -----"
          meson configure -C build

      # 6) Empaquetado portable + scripts (OSC, stats, ytdl_hook)
      - name: Make portable ZIP (with OSC)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          out="mpv-src/dist"
          mkdir -p "$out"

          # Ejecutables
          cp -v build/mpv.exe "$out/" || (echo "mpv.exe no encontrado" && exit 1)
          [ -f build/mpv.com ] && cp -v build/mpv.com "$out/"

          echo "Resolviendo DLLs con ntldd..."
          prefix_unix="/clang64/bin"
          mapfile -t DLLS < <(
            ntldd -R build/mpv.exe \
              | sed -n 's/.*=>[[:space:]]*\(.*\.dll\).*/\1/p' \
              | tr -d '\r'
          ) || true

          for p in "${DLLS[@]}"; do
            p_u="$(cygpath -u "$p" 2>/dev/null || echo "$p")"
            base="$(basename "$p_u")"
            # No redistribuir libdvdcss aunque esté instalada en el runner
            if [[ "$base" == *dvdcss*.dll ]]; then
              echo "  - skip $base"
              continue
            fi
            if [[ "$p_u" == $prefix_unix/*.dll ]]; then
              echo "  + $p_u"
              cp -nv "$p_u" "$out/" || true
            fi
          done

          # Scripts y configuración portable
          mkdir -p "$out/portable_config/scripts"
          cp -v "mpv-src/player/lua/osc.lua"       "$out/portable_config/scripts/"
          cp -v "mpv-src/player/lua/stats.lua"     "$out/portable_config/scripts/"
          cp -v "mpv-src/player/lua/ytdl_hook.lua" "$out/portable_config/scripts/"
          cat > "$out/portable_config/mpv.conf" << 'EOF'
          osc=yes
          input-default-bindings=yes
          force-window=yes
          ytdl=yes
          EOF

          # Empaquetar
          cd "$out"
          /usr/bin/zip -9 -r "d4rk0.mpv-${MPV_VER}-windows-x64.zip" .

      # 7) Localizar ZIP con ruta absoluta (Windows) para las actions
      - name: Locate ZIP (Windows absolute path)
        shell: pwsh
        run: |
          $name = "d4rk0.mpv-$env:MPV_VER-windows-x64.zip"
          $zip = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -File -Filter $name | Select-Object -First 1
          if (-not $zip) { throw "ZIP not found: $name" }
          "ZIP_PATH_WIN=$($zip.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ZIP found at: $($zip.FullName)"

      # 8) Artefacto de job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: d4rk0.mpv-${{ env.MPV_VER }}-windows-x64
          path: ${{ env.ZIP_PATH_WIN }}
          if-no-files-found: error

      # 9) Release en GitHub
      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: mpv-${{ env.MPV_VER }}
          name: "MPV ${{ env.MPV_VER }} (d4rk0 build, Windows x64)"
          files: ${{ env.ZIP_PATH_WIN }}
          make_latest: true
          fail_on_unmatched_files: true
