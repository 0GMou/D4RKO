name: Build MPV (d4rk0, Windows x64)

on:
  workflow_dispatch: {}
  # Opcional: build semanal para detectar nuevas releases
  schedule:
    - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      MSYSTEM: CLANG64
      CHERE_INVOKING: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Resolver la ÚLTIMA release estable de mpv
      - name: Resolve latest stable MPV release tag
        id: resolve_mpv
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"
          try {
            $tag = gh release view --repo mpv-player/mpv --json tagName --jq '.tagName'
          } catch {
            $resp = Invoke-RestMethod -Uri "https://api.github.com/repos/mpv-player/mpv/releases/latest" -Headers @{ "User-Agent"="d4rk0-ci" }
            $tag = $resp.tag_name
          }
          if (-not $tag) { throw "No pude resolver el tag de MPV." }
          $ver = $tag.TrimStart('v')
          "MPV_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "MPV_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "MPV tag: $tag  / version: $ver"

      # 2) Instalar MSYS2 + toolchain + dependencias (SIN comentarios en 'install')
      - name: Setup MSYS2 (CLANG64) + packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: clang64
          update: true
          install: >-
            git
            zip
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-meson
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-python
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-libplacebo
            mingw-w64-clang-x86_64-libass
            mingw-w64-clang-x86_64-harfbuzz
            mingw-w64-clang-x86_64-uchardet
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-spirv-cross
            mingw-w64-clang-x86_64-shaderc
            mingw-w64-clang-x86_64-ntldd

      # 3) Descargar código fuente de mpv (último tag estable)
      - name: Fetch mpv source
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          curl -fsSL -o mpv.tar.gz "https://github.com/mpv-player/mpv/archive/refs/tags/${MPV_TAG}.tar.gz"
          tar -xzf mpv.tar.gz
          mv "mpv-${MPV_VER}" mpv-src

      # 4) Parche mínimo FF_PROFILE_* -> AV_PROFILE_* (FFmpeg 8+)
      - name: Patch FF_PROFILE macros (FFmpeg 8+)
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -e
          sed -i 's/FF_PROFILE_ARIB_PROFILE_A/AV_PROFILE_ARIB_PROFILE_A/g' demux/demux_mkv.c
          sed -i 's/FF_PROFILE_ARIB_PROFILE_C/AV_PROFILE_ARIB_PROFILE_C/g' demux/demux_mkv.c
          sed -i 's/FF_PROFILE_UNKNOWN/AV_PROFILE_UNKNOWN/g' demux/demux_mkv.c

      # 5) Configurar + compilar con Meson/Ninja
      - name: Configure (Meson) & Build
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          meson setup build --buildtype=release
          meson compile -C build

      # 6) Empaquetar portable: mpv.exe + DLLs detectadas por ntldd
      - name: Make portable ZIP
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          mkdir -p ../dist
          cp -v build/mpv.exe ../dist/
          cp -v build/mpv.com ../dist/ || true
          # Extraer DLLs requeridas desde /clang64/bin
          cd build
          ntldd -R ./mpv.exe | awk '/=>/ {print $3}' | grep -E '^/clang64/bin/.*\.dll$' | sort -u | while read -r dll; do
            cp -nv "$dll" ../dist/ || true
          done
          cd ../dist
          /usr/bin/zip -9 -r "d4rk0.mpv-${MPV_VER}-windows-x64.zip" .

      # 7) Subir artefacto del job (útil para probar)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: d4rk0.mpv-${{ env.MPV_VER }}-windows-x64
          path: dist/d4rk0.mpv-${{ env.MPV_VER }}-windows-x64.zip

      # 8) Publicar en GitHub Releases (crea/actualiza release mpv-<versión>)
      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: mpv-${{ env.MPV_VER }}
          name: "MPV ${{ env.MPV_VER }} (d4rk0 build, Windows x64)"
          files: dist/d4rk0.mpv-${{ env.MPV_VER }}-windows-x64.zip
          make_latest: true
          fail_on_unmatched_files: true
