name: Build MPV (d4rk0, Windows x64)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    env:
      MSYSTEM: CLANG64
      CHERE_INVOKING: 1
      PACKAGE_ID: d4rk0.mpv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve latest stable MPV release
        id: mpvver
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $ErrorActionPreference = "Stop"
          $tag = ""
          if (Get-Command gh -ErrorAction SilentlyContinue) {
            if (-not $env:GH_TOKEN) { $env:GH_TOKEN = $env:GITHUB_TOKEN }
            $tag = $(gh release view --repo mpv-player/mpv --json tagName --jq '.tagName' 2>$null)
            if ($LASTEXITCODE -ne 0) { $tag = "" }
          }
          if (-not $tag) {
            $headers = @{
              "User-Agent"            = "d4rk0-ci"
              "Accept"                = "application/vnd.github+json"
              "X-GitHub-Api-Version"  = "2022-11-28"
              "Authorization"         = "Bearer $env:GITHUB_TOKEN"
            }
            $resp = Invoke-RestMethod -Method GET -Uri "https://api.github.com/repos/mpv-player/mpv/releases/latest" -Headers $headers
            $tag = $resp.tag_name
          }
          if (-not $tag) { throw "No pude resolver el tag de MPV." }
          $ver = $tag.TrimStart('v')
          "MPV_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "MPV_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "MPV tag: $tag / version: $ver"

      - name: Skip if release already exists (strict)
        id: skipcheck
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          $ErrorActionPreference = "Continue"
          $tag = "mpv-$env:MPV_VER"
          $url = "https://api.github.com/repos/$env:REPO/releases/tags/$tag"
          $headers = @{ "Authorization"="Bearer $env:GITHUB_TOKEN"; "Accept"="application/vnd.github+json" }
          try {
            $resp = Invoke-RestMethod -Method GET -Uri $url -Headers $headers -ErrorAction Stop
            $zipName  = "d4rk0.mpv-$env:MPV_VER-windows-x64.zip"
            $zipAsset = $resp.assets | Where-Object { $_.name -eq $zipName } | Select-Object -First 1
            if ($zipAsset -and ($zipAsset.size -ge 10485760)) {
              "skip=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              "release_url=$($resp.html_url)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              Write-Host "Release con ZIP válido ya existe: $($resp.html_url)"
            } else {
              "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              Write-Host "Falta el ZIP o es demasiado pequeño; continuamos."
            }
          } catch {
            "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            Write-Host "Release no existe; continuamos."
          }

      - name: Skip summary
        if: ${{ steps.skipcheck.outputs.skip == 'true' }}
        shell: pwsh
        run: |
          Write-Host "Saltado: ya existe la release ${{ steps.skipcheck.outputs.release_url }}"

      - name: Setup MSYS2 (CLANG64) + packages
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: clang64
          update: true
          cache: true
          install: >-
            git
            zip
            curl
            jq
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-python
            mingw-w64-clang-x86_64-meson
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-pkgconf
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-libass
            mingw-w64-clang-x86_64-libplacebo
            mingw-w64-clang-x86_64-harfbuzz
            mingw-w64-clang-x86_64-uchardet
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-spirv-cross
            mingw-w64-clang-x86_64-shaderc
            mingw-w64-clang-x86_64-ntldd
            mingw-w64-clang-x86_64-luajit
            mingw-w64-clang-x86_64-mujs
            mingw-w64-clang-x86_64-zimg
            mingw-w64-clang-x86_64-lcms2
            mingw-w64-clang-x86_64-libarchive
            mingw-w64-clang-x86_64-libbluray
            mingw-w64-clang-x86_64-libdvdread
            mingw-w64-clang-x86_64-libdvdnav

      - name: Fetch mpv source
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          curl -fsSL -o mpv.tar.gz "https://github.com/mpv-player/mpv/archive/refs/tags/${MPV_TAG}.tar.gz"
          tar -xzf mpv.tar.gz
          mv "mpv-${MPV_VER}" mpv-src

      - name: Patch FF_PROFILE -> AV_PROFILE (safe)
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -e
          sed -i 's/FF_PROFILE_/AV_PROFILE_/g' demux/demux_mkv.c || true

      - name: Configure & Build (Meson/Ninja)
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          meson setup build --buildtype=release
          meson compile -C build -v

      - name: Smoke test (Lua+OSC)
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          mkdir -p ./dist
          cat > ./dist/quickquit.lua <<'EOF'
          mp.add_timeout(0.1, function()
            mp.msg.info("quickquit ok")
            mp.command("quit 0")
          end)
          EOF
          ./build/mpv --no-config --idle=once --no-terminal \
            --script=player/lua/osc.lua \
            --script=./dist/quickquit.lua \
            --log-file=./dist/smoke_osc.log
          test -s ./dist/smoke_osc.log
          log="$(cat ./dist/smoke_osc.log)"; log=${log//$'\r'/}
          case "$log" in *"quickquit ok"*) : ;; *) echo "Marca no encontrada en smoke_osc.log"; exit 1 ;; esac

      - name: Dump feature summary
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euxo pipefail
          mkdir -p ./dist
          meson configure build > ./dist/FEATURES.txt

      - name: Make portable ZIP
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: msys2 {0}
        working-directory: mpv-src
        run: |
          set -euo pipefail
          out="./dist"
          mkdir -p "$out"
          cp -v build/mpv.exe "$out/" || (echo "mpv.exe no encontrado" && exit 1)
          [ -f build/mpv.com ] && cp -v build/mpv.com "$out/"
          echo "Resolviendo DLLs con ntldd..."
          prefix_unix="/clang64/bin"
          mapfile -t DLLS < <(
            ntldd -R build/mpv.exe | while IFS= read -r line; do
              case "$line" in
                *"=>"*".dll"*"("*")"*)
                  path="${line#*=> }"
                  path="${path%% (*}"
                  printf '%s\n' "$path"
                ;;
              esac
            done
          ) || true
          for p in "${DLLS[@]}"; do
            p_u="$(cygpath -u "$p" 2>/dev/null || echo "$p")"
            case "$p_u" in
              /clang64/bin/*.dll)
                echo "  + $p_u"
                cp -nv "$p_u" "$out/" || true
              ;;
            esac
          done
          mkdir -p "$out/portable_config/scripts"
          cp -v "player/lua/osc.lua"         "$out/portable_config/scripts/osc.lua"
          cp -v "player/lua/stats.lua"       "$out/portable_config/scripts/stats.lua"
          cp -v "player/lua/ytdl_hook.lua"   "$out/portable_config/scripts/ytdl_hook.lua"
          cp -v "TOOLS/lua/autoload.lua"     "$out/portable_config/scripts/autoload.lua"
          cat > "$out/portable_config/mpv.conf" << 'EOF'
          osc=yes
          input-default-bindings=yes
          force-window=yes
          ytdl=yes
          EOF
          cd "$out"
          /usr/bin/zip -9 -r "d4rk0.mpv-${MPV_VER}-windows-x64.zip" .

      - name: Locate outputs (ZIP & FEATURES)
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        id: locate
        shell: pwsh
        run: |
          $zipName  = "d4rk0.mpv-$env:MPV_VER-windows-x64.zip"
          $featName = "FEATURES.txt"
          $zip  = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -File -Filter $zipName  | Select-Object -First 1
          $feat = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -File -Filter $featName | Select-Object -First 1
          if (-not $zip)  { throw "ZIP not found: $zipName" }
          if (-not $feat) { throw "FEATURES.txt not found" }
          "ZIP_PATH_WIN=$($zip.FullName)"       | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "FEATURES_PATH_WIN=$($feat.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "ZIP: $($zip.FullName)"
          Write-Host "FEATURES: $($feat.FullName)"

      - name: Defender scan ZIP
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: pwsh
        run: |
          $paths = @(
            "$env:ProgramFiles\Windows Defender\MpCmdRun.exe",
            "$env:ProgramFiles\Microsoft Defender\MpCmdRun.exe"
          )
          $exe = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if ($exe) {
            & $exe -Scan -ScanType 3 -File "$env:ZIP_PATH_WIN"
          } else {
            Write-Host "MpCmdRun.exe no encontrado; omito escaneo."
          }

      - name: Generate SHA256SUMS.txt
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        shell: pwsh
        run: |
          $zip  = "$env:ZIP_PATH_WIN"
          $hash = (Get-FileHash -Algorithm SHA256 -Path $zip).Hash.ToLower()
          $sumPath = Join-Path (Split-Path $zip -Parent) "SHA256SUMS.txt"
          "$hash  $(Split-Path $zip -Leaf)" | Out-File -FilePath $sumPath -Encoding ascii -NoNewline
          "SHA256_PATH_WIN=$sumPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "SHA256SUMS: $sumPath"

      - name: Upload artifacts
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: d4rk0.mpv-${{ env.MPV_VER }}-windows-x64
          path: ${{ env.ZIP_PATH_WIN }}
          if-no-files-found: error
          retention-days: 30

      - name: Compose release notes
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        id: notes
        shell: pwsh
        run: |
          $zipPath   = "${{ env.ZIP_PATH_WIN }}"
          $featPath  = "${{ env.FEATURES_PATH_WIN }}"
          $outDir    = Split-Path $zipPath -Parent
          $notesPath = Join-Path $outDir "RELEASE_NOTES.txt"

          $features = Get-Content -Raw -Path $featPath

          function FindVal([string]$key, [string]$text) { if ($text -match "(?m)^\s*$key\s+([A-Za-z]+)\b") { $Matches[1] } else { "unknown" } }

          $vals = [ordered]@{
            "d3d11"      = FindVal "d3d11"      $features
            "gl"         = FindVal "gl"         $features
            "vulkan"     = FindVal "vulkan"     $features
            "lua"        = FindVal "lua"        $features
            "javascript" = FindVal "javascript" $features
            "libplacebo" = FindVal "libplacebo" $features
            "zimg"       = FindVal "zimg"       $features
            "lcms2"      = FindVal "lcms2"      $features
            "libbluray"  = FindVal "libbluray"  $features
            "dvdnav"     = FindVal "dvdnav"     $features
            "libmpv"     = FindVal "libmpv"     $features
            "gpl"        = FindVal "gpl"        $features
          }

          $ffv = ""; $lpv = ""
          $smoke = Join-Path $outDir "smoke_osc.log"
          if (Test-Path $smoke) {
            $log = Get-Content -Raw -Path $smoke
            if ($log -match "FFmpeg version:\s*([^\r\n]+)")     { $ffv = $Matches[1].Trim() }
            if ($log -match "libplacebo version:\s*([^\r\n]+)") { $lpv = $Matches[1].Trim() }
          }

          $lines = @(
            "### Highlights"
            "- Video outputs: d3d11: $($vals[""d3d11""]), gl: $($vals[""gl""]), vulkan: $($vals[""vulkan""])"
            "- Scripting: Lua: $($vals[""lua""]), JavaScript (MuJS): $($vals[""javascript""])"
            "- Quality: libplacebo: $($vals[""libplacebo""]), zimg: $($vals[""zimg""]), lcms2: $($vals[""lcms2""])"
            "- Discos: libbluray: $($vals[""libbluray""]), dvdnav: $($vals[""dvdnav""])"
            "- Librería/License: libmpv: $($vals[""libmpv""]), GPL: $($vals[""gpl""])"
          )
          if ($ffv -or $lpv) {
            $extra = "Versions: " + ($(if($ffv){"FFmpeg $ffv"}) + $(if($ffv -and $lpv){"; "}) + $(if($lpv){"libplacebo $lpv"}))
            $lines += $extra
          }

          ($lines -join "`r`n") | Out-File -FilePath $notesPath -Encoding utf8
          "RELEASE_NOTES_PATH_WIN=$notesPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Publish to GitHub Releases
        if: ${{ steps.skipcheck.outputs.skip != 'true' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: mpv-${{ env.MPV_VER }}
          name: "MPV ${{ env.MPV_VER }}"
          files: ${{ env.ZIP_PATH_WIN }}
          body_path: ${{ env.RELEASE_NOTES_PATH_WIN }}
          make_latest: true
          fail_on_unmatched_files: true
