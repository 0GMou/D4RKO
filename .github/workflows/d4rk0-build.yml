name: Build MPV (d4rk0, Windows x64)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"  # diario, 03:00 UTC: busca nueva release estable de mpv

jobs:
  build:
    runs-on: windows-latest

    env:
      PKG_PREFIX: clang64
      BUILD_DIR: build
      SRC_DIR: mpv-src

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Resolver última release estable de mpv (no prereleases)
      - name: Resolve latest stable MPV release
        id: mpv
        shell: pwsh
        run: |
          $resp = Invoke-WebRequest -Uri "https://api.github.com/repos/mpv-player/mpv/releases/latest" `
                  -Headers @{"Accept"="application/vnd.github+json"} `
                  | Select-Object -Expand Content | ConvertFrom-Json
          $tag = $resp.tag_name
          if (-not $tag) { throw "No se pudo resolver la tag estable de mpv" }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version=$($tag.TrimStart('v'))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # 2) Preparar MSYS2 (perfil CLANG64) + dependencias de mpv con extras
      - name: Setup MSYS2 (CLANG64) + packages
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: CLANG64
          # Paquetes verificados en MSYS2 clang64
          install: >-
            base-devel
            git
            python
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-pkgconf
            mingw-w64-clang-x86_64-meson
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-libplacebo
            mingw-w64-clang-x86_64-libass
            mingw-w64-clang-x86_64-harfbuzz
            mingw-w64-clang-x86_64-uchardet
            mingw-w64-clang-x86_64-luajit
            mingw-w64-clang-x86_64-mujs
            mingw-w64-clang-x86_64-zimg
            mingw-w64-clang-x86_64-lcms2
            mingw-w64-clang-x86_64-libarchive
            mingw-w64-clang-x86_64-libbluray
            mingw-w64-clang-x86_64-libdvdread
            mingw-w64-clang-x86_64-libdvdnav
            mingw-w64-clang-x86_64-vapoursynth
            mingw-w64-clang-x86_64-shaderc
            mingw-w64-clang-x86_64-spirv-cross
            mingw-w64-clang-x86_64-vulkan-loader

      # 3) Obtener código fuente de mpv en la tag resuelta
      - name: Fetch mpv source
        shell: bash
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${{ steps.mpv.outputs.tag }}" https://github.com/mpv-player/mpv.git "$SRC_DIR"

      # 4) Parche seguro FFmpeg 8+: FF_PROFILE -> AV_PROFILE (si aparece)
      - name: Patch FF_PROFILE -> AV_PROFILE (safe)
        shell: bash
        run: |
          set -euxo pipefail
          shopt -s globstar
          pushd "$SRC_DIR"
          # Parche no destructivo: sólo si encuentra el token antiguo
          grep -RIl 'FF_PROFILE' || true
          files=$(grep -RIl 'FF_PROFILE' || true)
          if [ -n "${files}" ]; then
            sed -i 's/FF_PROFILE/AV_PROFILE/g' ${files}
          fi
          popd

      # 5) Configurar y compilar (Meson/Ninja). Autodetección de features.
      - name: Configure & Build (Meson/Ninja)
        shell: bash
        run: |
          set -euxo pipefail
          meson setup "$BUILD_DIR" "$SRC_DIR" --buildtype=release
          meson compile -C "$BUILD_DIR"

      # 6) Empaquetar ZIP portable + scripts + config
      - name: Make portable ZIP
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p mpv-src/dist
          cp -v "$BUILD_DIR/mpv.exe" "mpv-src/dist/mpv.exe"
          # copias opcionales (libmpv.dll por si te interesa distribuir SDK)
          if [ -f "$BUILD_DIR/libmpv-2.dll" ]; then cp -v "$BUILD_DIR/libmpv-2.dll" "mpv-src/dist/"; fi

          # Estructura portable_config + scripts integrados
          mkdir -p "mpv-src/dist/portable_config/scripts"
          # Scripts integrados en el repo de mpv (OSC, stats, ytdl_hook)
          cp -v "$SRC_DIR/player/lua/osc.lua"         "mpv-src/dist/portable_config/scripts/"
          cp -v "$SRC_DIR/player/lua/stats.lua"       "mpv-src/dist/portable_config/scripts/"
          cp -v "$SRC_DIR/player/lua/ytdl_hook.lua"   "mpv-src/dist/portable_config/scripts/"

          # mpv.conf con ajustes sensatos
          cat > "mpv-src/dist/portable_config/mpv.conf" << 'MPVCONF'
          osc=yes
          force-window=yes
          ytdl=yes
          # Si usas yt-dlp en PATH, ytdl_hook lo encontrará. Puedes forzarlo así:
          # script-opts=ytdl_hook-ytdl_path=yt-dlp
          MPVCONF

          # README rápido
          cat > "mpv-src/dist/LEEME.txt" << 'TXT'
          d4rk0 build: mpv portátil para Windows (x64).
          - Doble clic en mpv.exe para abrir.
          - La carpeta portable_config guarda tu configuración y scripts.
          - OSC (barra de controles), stats y ytdl_hook están activados.
          - Para reproducir URLs, instala "yt-dlp" (winget: winget install yt-dlp).
          - DVDs sin protección y Blu-rays: soporte habilitado por libdvdread/nav y libbluray.
          TXT

          # Empaquetar
          cd mpv-src/dist
          zipname="d4rk0.mpv-${{ steps.mpv.outputs.version }}-windows-x64.zip"
          7z a -tzip "../$zipname" * -mx=9
          cd ..
          echo "ZIP_PATH=$PWD/$zipname" >> $GITHUB_ENV

      # 7) Convertir a ruta absoluta de Windows (para upload)
      - name: Locate ZIP (Windows absolute path)
        shell: pwsh
        run: |
          $p = Resolve-Path "$env:ZIP_PATH"
          "ARTIFACT=$p" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        id: paths

      # 8) Subir artefacto
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: d4rk0-mpv-${{ steps.mpv.outputs.version }}-windows-x64
          path: ${{ steps.paths.outputs.ARTIFACT }}

      # 9) Publicar en GitHub Releases (tag mpv-X.Y.Z si no existe)
      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: mpv-${{ steps.mpv.outputs.version }}
          name: MPV ${{ steps.mpv.outputs.version }} (d4rk0 build, Windows x64)
          files: ${{ steps.paths.outputs.ARTIFACT }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
